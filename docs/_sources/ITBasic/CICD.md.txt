# CICD
多様なツールを連携させることで、ビルド・テスト・デプロイ・リリースを自動化する開発手法。
CICDを導入することで、開発のスピードが上がり、機能開発の速度を上げることができる。

## CI(Continuous Integration)
アプリケーションのビルドとテストを自動化することを目標とする。

１日に何度も自動でビルドとテストを行うことで、問題の早期発見、手戻り現象、品質向上、工数削減が可能となる。

## CD(Continuous Delivery)
デプロイ・リリースのプロセス全体を自動化することを目標とする。

短期間で継続的にリリーすることでビジネス要求の変化に対応したり、即時リリースなどに対応できるようになりリリースのハードルを下げることができる。

## 試験自動化
テストを自動化することで、時間の削減やヒューマンエラーの抑制などの効果を得ることができる。
回帰テスト（リグレッション）は時間の都合上スキップされてしまうことがあるが、自動化により行うことができる。

自動化に向けては自動化の学習、スクリプの作成といった初期コストやテストコードのメンテナンスを踏まえたランニングコストがかかる点に注意。

自動化のテストの対象としては、UT/IT/UIテストなどが挙げられる。
自動化の親和性としては、ユニットテストが高い。

### ユニットテスト
関数やメソッドなどのユニットごとにテストを行う。

### インテグレーションテスト
複数のモジュールやコンポーネントを組み合わせてシステム全体が正しく動いているかのテストをする。

### UIテスト
ユーザーと同じようにブラウザなどから挙動が期待通りかを検証テストする。