# ソフトウェア開発現場の「失敗」集めてみた
[ソフトウェア開発現場の「失敗」集めてみた。 42の失敗事例で学ぶチーム開発のうまい進めかた](https://www.amazon.co.jp/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E7%8F%BE%E5%A0%B4%E3%81%AE%E3%80%8C%E5%A4%B1%E6%95%97%E3%80%8D%E9%9B%86%E3%82%81%E3%81%A6%E3%81%BF%E3%81%9F%E3%80%82-42%E3%81%AE%E5%A4%B1%E6%95%97%E4%BA%8B%E4%BE%8B%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%AE%E3%81%86%E3%81%BE%E3%81%84%E9%80%B2%E3%82%81%E3%81%8B%E3%81%9F-%E5%87%BA%E7%9F%B3-%E8%81%A1%E5%8F%B2/dp/4798185183)
は、ソフトウェア開発プロジェクトにおける様々な失敗例を具体的に紹介し、デスマーチ状態に陥らないための知見を提供するノウハウ本。現場で起こりがちな失敗エピソードを疑似体験し、プロジェクトを成功に導くための教訓が42のケーススタディを通じて述べられている。本書の内容に沿ってソフトウェア開発の各フェーズで起こりうる失敗とその対策をまとめる。


## デスマーチとは
ソフトウェア開発における最悪の失敗は、プロジェクトが`デスマーチ`状態に陥ること
デスマーチとは、`成功の見込みがほとんどないのに、過酷な条件下で無理に進められるプロジェクト`を指す言葉で、QCDの全てが崩壊している状態といえる。つまり、「大量の開発作業を、少ない人数で、短いスケジュール内に完了させなければならない」無謀なプロジェクト状態。

ちなみに「デスマーチ（Death March）」という言葉は、十分な食料や水も与えられず暴力や過酷な環境下で捕虜や非戦闘員を長距離行進させ、多数の死者を出した出来事（いわゆる死の行進）に由来する。それほどまでに過酷でプロジェクトメンバーを消耗させる状況を表現している。

どうしてQCDが崩れたデスマーチとなってしまうのか、主な要因は以下
- 要求面（Quality/Scope）:  
顧客やステークホルダーからの要求を際限なくすべて取り込んでしまい、仕様が肥大化する（いわゆるスコープの暴走）。
- コスト面（Cost）:  
見積もりが楽観的すぎたり難易度の見誤りによって必要な人員・予算を確保できない（リソース不足）。
- 納期面（Delivery）:  
ビジネス上の理由などで不合理に厳しいリリース期限が設定され、スケジュールに無理がある。

## 失敗ケーススタディ
### 企画で失敗
プロジェクト企画・計画の段階では、最初の見積もりや方針のミスが後々のデスマーチ要因につながることがある。
よくある失敗例として、次のような課題が挙げられる。

|失敗|発生する問題|対策・ベストプラクティス|
|:----|:----|:----|
|顧客からの追加要望を全て受け入れてしまう（要求の肥大化）|スケジュールのバッファが消失し、計画にない作業が増えてプロジェクトがパンクする。|新たな要望は必ずバックログに積み、優先度の低い項目を後回しにするなど調整する。<br>安易にバッファを潰して対応しないこと。|
|要望を鵜呑みにして「本当に必要か」を検討しない|不要な機能まで追加してソフトウェアが肥大化し、開発工数が増大する。無駄な実装にリソースが割かれる。|要望の背景や真の目的を深掘りし、本当に必要な機能か見極めてから取り込む。<br>ソフトウェアはシンプルであるほど良い。|
|「隠れ成果物」（内部ツール等）の洗い出し漏れ|想定外の付随作業が後から発覚してスケジュールが逼迫する。計画になかった成果物作成に時間を取られる。|成果物ベースでWBSを作成し、内部ツールなど含めすべての成果物を最初に洗い出す。<br>抜け漏れのない計画立案を心がける。<br>WBSのWorkはそもそも成果物という意味なので成果物を一覧化してから作業に落とし込む。|
|未熟メンバーも最初からフル稼働前提で計画<br>育成する側の工数を検討していない|育成やOJTに上級者の手が取られ、生産性が当初見積より低下する。<br>新人を戦力と見なした計画通りに進まず破綻する。|チームメンバーの成長・育成コストを考慮し、余裕ある人員計画にする。<br>初心者は一人前としてカウントせず、指導時間も見込んで計画する。|
|社内の人事異動・政治を考慮しない|チームが順調だと他部署から人を引き抜かれるなどして、気づけば人手不足になる。<br>計画していた戦力が維持できなくなる。|社内のリソース異動の動きを常に把握し、必要に応じて増員の検討や引き留めを行う。<br>上層部とも調整しチームの人的資源を確保・維持する。|


### 要件定義で失敗
要件定義のフェーズでは、ユーザー要求をどれだけ明確にできるかが重要。
要件の詰めが甘いと後工程で大きな手戻りを招く。典型的な失敗として、以下の点が挙げられる。

|失敗|発生する問題|対策・ベストプラクティス|
|:----|:----|:----|
|要件が曖昧なまま進めてしまう|基本設計に入ってから隠れた仕様が浮上し、設計のやり直しや見積もりミスが発覚する。<br>最悪の場合、実装後に要件漏れが判明する。|要件定義の段階で不明点を洗い出し、仕様を具体化してから次工程に進む。<br>曖昧さを残さず、仕様書に明記することで認識齟齬をなくす。|


### 基本設計で失敗
基本設計（アーキテクチャ設計や外部設計）の段階では、仕様の伝達不足や技術選定ミスが後の問題を引き起こす。
主な失敗例は以下の通り。

|失敗|発生する問題|対策・ベストプラクティス|
|:----|:----|:----|
|基本設計の詰めが甘いまま外部に委託する|ベンダーや他チームが仕様を誤解し、要件とずれた実装を行ってしまう。<br>成果物受け入れ時に手戻りが発生し、当初見積もりを超える工数がかかる。|「仕様は伝わらないもの」と捉え、委託前に受入テスト項目や期待する動作を明文化しておく。<br>受入れ検査仕様書を用意し、事前に認識合わせを徹底してから委託する。|
|専門用語や定義の共有不足（用語の曖昧さ）|メンバー間でドメイン知識の前提がずれ、UXや設計に不整合が生じる。<br>誤解に基づく設計は後で作り直しが必要になり、無駄な手戻りが増える。|プロジェクト内で用語定義書（グロッサリー）を作成・共有しておく。<br>用語の意味やルールを明確に定義し、誰もが共通認識を持てるようにする。|
|新規技術やライブラリを安易に採用する|技術検証不足により、導入した新技術が要件を満たせなかったり想定以上に実装工数を要したりする。<br>トラブル対応に追われ、計画が大幅に狂うリスク。|採用予定の新技術は早い段階でPoC（検証）を行い、問題点を洗い出しておく。<br>チームに経験者がいない技術は慎重に扱い、代替案やフォールバックプランも用意しておく。|


### 詳細設計で失敗
詳細設計から実装・テストにかけてのフェーズでは、チーム内の連携不備や開発プロセスの問題が不具合の多発や効率低下を招く。
主な失敗例を以下に挙げる。

|失敗|発生する問題|対策・ベストプラクティス|
|:----|:----|:----|
|システム全体の設計思想・方針が共有されていない|各メンバーが独自判断で改修を行い、大きな影響範囲の変更や一貫性のない実装が生まれる。<br>結果としてバグや品質低下を招き、後で再修正が必要になる。|アーキテクチャや設計原則を文書化し、レビューや勉強会を通じてチーム全員に周知する。<br>設計の意図や判断基準を共有し、勝手な改変を防ぐ。|
|リポジトリ管理のルール不備|ソースコードやドキュメントのバージョン管理が徹底されず、必要な成果物がリポジトリに揃わない。<br>属人的な管理になると共有漏れや変更履歴不明による手戻りが発生する。|リポジトリの構成や運用ルール（ディレクトリ構成、命名規則、登録対象物など）を定めて徹底する。<br>全ての成果物を一元管理し、常に最新の情報を共有できる状態にする。|
|開発者が設計～保守の一連の経験を積んでいない|設計の勘所が身についておらず、変更による影響範囲を誤ったり非効率な実装をしてしまう。<br>設計意図を理解しない改修が重なると、システムの構造が劣化する。|開発者自身が詳細設計から実装、そして保守まで担当する機会を設け、設計の勘所を習得させる。<br>経験を通じて初めて得られる知見を重視し、人材育成に反映する。|
|場当たり的なバグ修正の繰り返し|その場しのぎのバグ修正が新たな不具合を生み、修正の無限ループに陥る。<br>「バグ修正地獄」となりスケジュール遅延や品質低下を招いてしまう。|焦って対処療法的に修正するのではなく、不具合の真因を徹底的に究明する。<br>一度立ち止まり、再発防止策も含めた根本的な解決策を講じてから修正に当たる。|
